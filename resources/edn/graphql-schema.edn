{:interfaces
 {:label {:description "A label used in sysrev"
          :fields {:id {:type (non-null String)
                        :description "The sysrev label UUID"}
                   :type {:type (non-null String)
                          :description "The type of label, boolean, categorical, string, etc."}
                   :name {:type (non-null String)
                          :description "The label's name"}
                   :question {:type (non-null String)
                              :description "The question that this label asks"}
                   :required {:type (non-null Boolean)
                              :description "Was this label required to be answered before user could save their response?"}
                   :consensus {:type (non-null Boolean)
                               :description "Check answers for consensus among users. If true, articles will be marked as conflicted if user answers are not identical"}}}}
 :objects
 {:Reviewer {:description "A sysrev reviewer"
             :fields {:id {:type (non-null Int)
                           :description "The user-id of the reviewer"}
                      :name {:type String
                             :description "The name of the user as shown on sysrev"}}}
  :LabelDefinition {:implements [:label]
                    :description "The label definitions used by a project."
                    :fields {:id {:type (non-null String)}
                             :type {:type (non-null String)}
                             :name {:type (non-null String)}
                             :question {:type (non-null String)}
                             :enabled {:type (non-null Boolean)
                                       :description "Is this label enabled?"}
                             :required {:type (non-null Boolean)}
                             :consensus {:type (non-null Boolean)}
                             :definition {:type String
                                          :description "The JSON definition of a label"}}}
  :GroupLabelDefinition {:description "The group label definitions used by a project."
                         :fields {:id {:type (non-null String)}
                                  :type {:type (non-null String)}
                                  :name {:type (non-null String)}
                                  :question {:type (non-null String)}
                                  :enabled {:type (non-null Boolean)
                                            :description "Is this label enabled?"}
                                  :required {:type (non-null Boolean)}
                                  :definition {:type String
                                               :description "The JSON definition of a label"}
                                  :labels {:type (list :LabelDefinition)
                                           :description "The labels contained in the group label"}}}
  :LabelAnswer {:implements [:label]
                :fields {:id {:type (non-null String)}
                         :type {:type (non-null String)}
                         :name {:type (non-null String)}
                         :question {:type (non-null String)}
                         :required {:type (non-null Boolean)}
                         :reviewer {:type :Reviewer
                                    :description "The reviewer who answered this label"}
                         :consensus {:type (non-null Boolean)}
                         :answer {:type (list String)
                                  :description "The answer to this label"}
                         :created {:type (non-null String)
                                   :description "When this was label created"}
                         :updated {:type (non-null String)
                                   :description "When was this label lasted updated"}
                         :confirmed {:type String
                                     :description "When was this label confirmed if consensus was required?"}}}
  :GroupLabelSubAnswer {:fields {:id {:type (non-null String)}
                                 :type {:type (non-null String)}
                                 :name {:type (non-null String)}
                                 :question {:type (non-null String)}
                                 :required {:type (non-null Boolean)}
                                 :consensus {:type (non-null Boolean)}
                                 :answer {:type (list String)
                                          :description "The answer to this label"}}}
  :GroupLabelAnswer {:implements [:label]
                     :fields {:id {:type (non-null String)}
                              :type {:type (non-null String)}
                              :name {:type (non-null String)}
                              :question {:type (non-null String)}
                              :required {:type (non-null Boolean)}
                              :reviewer {:type :Reviewer
                                         :description "The reviewer who answered this label"}
                              :consensus {:type (non-null Boolean)}
                              :created {:type (non-null String)
                                        :description "When this was label created"}
                              :updated {:type (non-null String)
                                        :description "When was this label lasted updated"}
                              :confirmed {:type String
                                          :description "When was this label confirmed if consensus was required?"}
                              :answer {:type (list (list :GroupLabelSubAnswer))
                                       :description "The answer to this label"}}}
  :Article {:fields {:id {:type (non-null Int)
                          :description "Sysrev id of article"}
                     :uuid {:type (non-null String)
                            :description "The sysrev UUID for the article"}
                     :datasource_id {:type String
                                     :description "The entity id associated with this article on datasource"}
                     :enabled {:type (non-null Boolean)
                               :description "Is this article enabled?"}
                     :labels {:type (list :LabelAnswer)
                              :description "A list of label answers associated with this article"}
                     :groupLabels {:type (list :GroupLabelAnswer)
                                   :description "A list of group label answers associated with this article"}
                     :content {:type String
                               :description "A string representation of the content"}}}
  :Project {:fields {:id {:type (non-null Int)
                          :description "The sysrev id of the project"}
                     :name {:type (non-null String)
                            :description "The name of the project"}
                     :date_created {:type (non-null String)
                                    :description "The data this project was created"}
                     :articles {:type (list :Article)
                                :description "The articles associated with this project"}
                     :labelDefinitions {:type (list :LabelDefinition)
                                        :description "The labels associated with this project"}
                     :groupLabelDefinitions {:type (list :GroupLabelDefinition)
                                             :description "The group labels associated with this project"}}}}
 :queries {:project {:type :Project
                     :description "Read a project by its id"
                     :args {:id {:type (non-null Int)}}
                     :resolve :resolve-project}}
 :mutations {:importArticles {:type Boolean
                              :description "Import articles with a query string from datasource. Result is true when import is successful false otherwise. Query must at minimum contain the subfield id, corresponding to the datasource id. Avoid extraneous subfields such as content,updated,url, etc as these will be ignored during import and displayed when an individual article is viewed. Limit your query to a single query as multiple queries are not currently handled."
                              :args {:query {:type (non-null String)
                                             :description "The GraphQL query string that imports an entities content"}
                                     :id {:type (non-null Int)
                                          :description "The project-id to import entities into"}}
                              :resolve :resolve-import-articles!}
             :importDataset {:type Boolean
                             :description "Import a dataset from datasource as a source on SysRev. Result is true when import is successful,false otherwise."
                             :args {:id {:type (non-null Int)
                                         :description "The project-id to import entities into"}
                                    :dataset {:type (non-null Int)
                                              :description "The dataset id to import"}}
                             :resolve :resolve-import-dataset!}
             :importDatasource {:type Boolean
                                :description "Import each datasets from datasource as an individual source on SysRev. Result is true when import is successful, false otherwise"
                                :args {:id {:type (non-null Int)
                                            :description "The project-id to import entities into"}
                                       :datasource {:type (non-null Int)
                                                    :description "The datasource id to import"}}
                                :resolve :resolve-import-datasource!}
             :importDatasourceFlattened {:type Boolean
                                         :description "Import all datasets from datasource as a single source on SysRev. Result is true when import is successful, false otherwise"
                                         :args {:id {:type (non-null Int)
                                                     :description "The project-id to import entities into"}
                                                :datasource {:type (non-null Int)
                                                             :description "The datasource id to import"}}
                                         :resolve :resolve-import-datasource-flattened!}
             :importArticleFilterUrl {:type Boolean
                                      :description "Import articles using a article filter from a project"
                                      :args {:url {:type (non-null String)
                                                   :description "The URL copied from the article filters view of a project"}
                                             :sourceID {:type (non-null Int)
                                                        :description "The ID of the project from which articles are being exported"}
                                             :targetID {:type (non-null Int)
                                                        :description "The Id of the project to which article are being imported"}}
                                      :resolve :resolve-import-article-filter-url!}}}
