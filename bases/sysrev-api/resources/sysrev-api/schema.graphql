# Guidelines for schema design:
# https://graphqlmastery.com/blog/graphql-best-practices-for-graphql-schema-design

# *Connection, *Edge, and PageInfo from the GraphQL Cursor Connections Specification:
# https://relay.dev/graphql/connections.htm

"A DateTime in ISO-8061 instant format, such as \"2011-12-03T10:15:30Z\"."
scalar DateTime

enum ProjectLabelType {
  BOOLEAN
  CATEGORICAL
  STRING
}

"PageInfo as defined by the GraphQL Cursor Connections Specification: https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo"
type PageInfo {
  "The cursor corresponding to the last node in edges."
  endCursor: String

  "Used to indicate whether more edges exist following the set defined by the client's arguments."
  hasNextPage: Boolean!

  "Used to indicate whether more edges exist prior to the set defined by the client's arguments."
  hasPreviousPage: Boolean!

  "The cursor corresponding to the first node in edges."
  startCursor: String
}

type Project {
  "The project's unique id."
  id: ID!

  "When the project was created."
  created: DateTime!

  "The labels associated with this project."
  labels(
    after: String
    first: Int
  ): ProjectLabelsConnection!

  "The project's name."
  name: String!

  "Whether the project is publicly viewable."
  public: Boolean!
}

type ProjectLabel {
  "The label's unique id."
  id: ID!

  "Whether answers checked for consensus among users. If true, articles are marked as conflicted if user answers are not identical."
  consensus: Boolean!

  "Whether the label is enabled."
  enabled: Boolean!

  "The label's name."
  name: String!

  "The question that the label asks."
  question: String!

  "Whether the label is required to be answered."
  required: Boolean!

  "The type of label (e.g., BOOLEAN, CATEGORICAL, STRING)."
  type: ProjectLabelType!
}

type ProjectLabelsConnection {
  edges: [ProjectLabelsEdge]
  pageInfo: PageInfo!
  totalCount: Int
}

type ProjectLabelsEdge {
  cursor: String!
  node: ProjectLabel
}

input CreateProjectInput {
  name: String!
  public: Boolean!
}

type Query {
  project(id: ID!): Project
}

type Mutation {
  createProject(input: CreateProjectInput!): Project
}

schema {
  query: Query
  mutation: Mutation
}
