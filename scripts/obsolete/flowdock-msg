#!/usr/bin/python3

import argparse, requests, json

default_flow_tokens = ['3b68626ba6383cd066505e7c462a4864']

parser = argparse.ArgumentParser(description='Send inbox messages to Flowdock API')

parser.add_argument('--flow',action='append')
parser.add_argument('--host',default='ws1.insilica.co')
parser.add_argument('--protocol',default='https')

subparsers = parser.add_subparsers(dest='type')

parser_pl = subparsers.add_parser('pipeline')
parser_pl.add_argument('-j','--job',required=True)
parser_pl.add_argument('-n','--build-num',required=True)
parser_pl.add_argument('-m','--message',required=True)
parser_pl.add_argument('-b','--branch')
parser_pl.add_argument('-r','--result')
parser_pl.add_argument('-c','--color')
parser_pl.add_argument('-s','--status')

# parser_msg = subparsers.add_parser('message', help='message help')
# parser_msg.add_argument('-m','--message',required=True)

def make_api_url(token):
    return 'https://api.flowdock.com/messages?flow_token=%s' % token
def make_jenkins_url(args):
    if args.branch == None or args.branch == 'null':
        subjob = args.job
    else:
        subjob = args.branch
    return '%s://%s/blue/organizations/jenkins/%s/detail/%s/%s/pipeline' % (
        args.protocol, args.host, args.job, subjob, args.build_num)
def make_jenkins_console_url(args):
    if args.branch == None or args.branch == 'null':
        return '%s://%s/job/%s/%s/console' % (
            args.protocol, args.host, args.job, args.build_num)
    else:
        return '%s://%s/job/%s/job/%s/%s/console' % (
            args.protocol, args.host, args.job, args.branch, args.build_num)
def make_thread_id(args):
    return '%s_%s_%s' % (args.job, args.branch, args.build_num)

def send_msg(args):
    jenkins_url = make_jenkins_url(args)
    console_url = make_jenkins_console_url(args)
    thread_id = make_thread_id(args)

    if args.flow is None:
        tokens = default_flow_tokens
    else:
        tokens = args.flow

    if args.result == None:
        (status, color) = ('running','blue')
    else:
        try:
            (status, color) = {
                'SUCCESS': ('success','green'),
                'UNSTABLE': ('unstable','yellow'),
                'FAILURE': ('failure','red')
            }[args.result]
        except:
            (status, color) = ('unknown','grey')
    if args.color != None:
        color = args.color
    if args.status != None:
        status = args.status

    assert(status != None and color != None)

    if args.branch == None or args.branch == 'null':
        title = '%s' % args.job
    else:
        title = '%s.%s pipeline' % (args.job, args.branch)

    for token in tokens:
        body = {
            'flow_token': token,
            'external_thread_id': thread_id,
            'event': 'activity',
            'author': {'name': 'jenkins'},
            'title': args.message,
            'thread': {
                'title': title,
                'fields': [],
                'actions': [
                    {'@type': 'ViewAction',
                     'url': console_url,
                     'name': 'Console log',
                     'description': 'View build console log in Jenkins'}
                ],
                'body': '',
                'external_url': jenkins_url,
                'status': {'color': color, 'value': status}
            }
        }
        r = requests.post(make_api_url(token), data=json.dumps(body),
                          headers={'Content-Type': 'application/json'})
        print('response: %s' % r.json())

if __name__ == '__main__':
    args = parser.parse_args()
    send_msg(args)
