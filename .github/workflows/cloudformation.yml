name: "Deploy CloudFormation Global and Regional Resources Stacks"
concurrency: sysrev-cloudformation-${{ github.ref_name }}

on:
  push:
    branches:
      - staging
      - production
    paths:
      - '.github/workflows/cloudformation.yml'
      - 'components/cloudformation-templates/**'

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Cache Clojure dependencies
        uses: actions/cache@v3
        timeout-minutes: 5
        with:
          key: clj-sysrev-${{ hashFiles('**/deps.edn') }}
          restore-keys: clj-sysrev-
          path: |
            ~/.gitlibs
            ~/.m2/repository

      - name: Install Nix
        uses: cachix/install-nix-action@v17
        timeout-minutes: 5
        with:
          nix_path: nixpkgs=channel:nixos-21.11

      - name: Cache Nix store
        id: nix-cache
        uses: john-shaffer/cache@sudo-tar
        timeout-minutes: 10
        with:
          key: nix-sysrev-${{ hashFiles('**.nix') }}
          restore-keys: nix-sysrev-
          path: |
            ~/nix-db-dump
            /nix/store
            /nix/var/nix/profiles

      - run: sudo `command -v nix-store` --load-db < ~/nix-db-dump || true
        if: steps.nix-cache.outputs.cache-hit == 'true'

      - name: Build Nix derivation
        run: |
          mkdir -p ~/.config/nixpkgs
          echo "{ allowUnfree = true; }" > ~/.config/nixpkgs/config.nix
          nix-build -A inputDerivation -o gcroots

      - name: Configure AWS staging credentials
        if: github.ref_name == 'staging'
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_STAGING }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_STAGING }}
          aws-region: us-east-1
          mask-aws-account-id: no

      - name: Configure AWS prod credentials
        if: github.ref_name == 'production'
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
          aws-region: us-east-1
          mask-aws-account-id: no

      - name: Deploy CloudFormation stacks to staging
        if: github.ref_name == 'staging'
        run: |
          nix-shell --run "clojure -X:dev sysrev.cloudformation-templates.core/deploy!"

      - name: Deploy CloudFormation stacks to production
        if: github.ref_name == 'production'
        run: |
          nix-shell --run "clojure -X:prod:dev sysrev.cloudformation-templates.core/deploy!"

      - name: Prepare nix cache
        if: steps.nix-cache.outputs.cache-hit != 'true'
        run: |
          nix-store --dump-db > ~/nix-db-dump

      - name: Log job run to Slack
        uses: 8398a7/action-slack@v3.13.0
        if: always()
        with:
          status: custom
          fields: workflow,job,commit,repo,ref,author,took
          custom_payload: |
            {
              attachments: [{
                color: '${{ job.status }}' === 'success' ? 'good' : '${{ job.status }}' === 'failure' ? 'danger' : 'warning',
                text: `${process.env.AS_WORKFLOW}\n${process.env.AS_JOB} (${process.env.AS_COMMIT}) of ${process.env.AS_REPO}@${process.env.AS_REF} by ${process.env.AS_AUTHOR} ${{ job.status }} in ${process.env.AS_TOOK}`,
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
