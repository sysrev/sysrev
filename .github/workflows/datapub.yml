name: "Test and Build Datapub"
concurrency: sysrev-datapub-${{ github.ref_name }}

on:
  push:
    paths:
      - '.github/workflows/datapub.yml'
      - 'components/cloudformation-templates/out/datapub.template'
      - 'projects/datapub/**'
      - '!**.md'

jobs:
  get-global-resources:
    outputs:
      datapub-bucket: ${{ steps.get-stack-outputs.outputs.DatapubBucket }}
      datapub-zone-apex: ${{ steps.get-stack-outputs.outputs.DatapubZoneApex }}
      service-role-arn: ${{ steps.get-stack-outputs.outputs.AdminAccessCloudFormationServiceRoleArn }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Configure AWS staging credentials
        if: github.ref_name == 'staging'
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_STAGING }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_STAGING }}
          aws-region: us-east-1
          mask-aws-account-id: no

      - name: Configure AWS prod credentials
        if: github.ref_name == 'production'
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
          aws-region: us-east-1
          mask-aws-account-id: no

      - name: Get Sysrev-Global-Resources stack outputs
        if: github.ref_name == 'staging' || github.ref_name == 'production'
        id: get-stack-outputs
        uses: john-shaffer/aws-cloudformation-github-deploy@skip-deploy
        with:
          name: Sysrev-Global-Resources
          skip-deploy: '1'
          template: 'unused'

  datapub:
    needs: get-global-resources
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Cache Clojure dependencies
        uses: actions/cache@v2
        with:
          key: clj-datapub-${{ hashFiles('**/deps.edn') }}
          restore-keys: clj-datapub-
          path: |
            ~/.gitlibs
            ~/.m2/repository

      - name: Install Nix
        uses: cachix/install-nix-action@v16

      - name: Cache Nix store
        id: nix-cache
        uses: john-shaffer/cache@sudo-tar
        with:
          key: nix-datapub-${{ hashFiles('**.nix') }}
          restore-keys: nix-datapub-
          path: |
            ~/nix-db-dump
            /nix/store
            /nix/var/nix/profiles

      - run: sudo `command -v nix-store` --load-db < ~/nix-db-dump
        if: steps.nix-cache.outputs.cache-hit == 'true'

      - run: nix-build -A inputDerivation -o gcroots
        working-directory: projects/datapub

      - name: Run tests
        run: |
          sudo chown runner:runner /run/postgresql
          nix-shell --run "bash test.sh"
        timeout-minutes: 5
        working-directory: projects/datapub
        env:
          AWS_REGION: us-east-1

      - name: Build datapub staging uberjar
        if: github.ref_name == 'staging'
        run: nix-shell --run "clojure -X:uberjar-staging"
        working-directory: projects/datapub

      - name: Build datapub prod uberjar
        if: github.ref_name == 'production'
        run: nix-shell --run "clojure -X:uberjar"
        working-directory: projects/datapub

      - name: Configure AWS staging credentials
        if: github.ref_name == 'staging'
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_STAGING }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_STAGING }}
          aws-region: us-east-1
          mask-aws-account-id: no

      - name: Configure AWS prod credentials
        if: github.ref_name == 'production'
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
          aws-region: us-east-1
          mask-aws-account-id: no

      - name: Build datapub AMI
        if: github.ref_name == 'staging' || github.ref_name == 'production'
        run: |
          export UUID=$(uuidgen)
          nix-shell ../default.nix --run "packer build -var git-ref=$GITHUB_REF -var git-sha=$GITHUB_SHA -var uuid=$UUID datapub.pkr.hcl"
          export AMI=$(aws ec2 describe-images --filters Name='tag:sysrev:build:uuid',Values=$UUID --query 'Images[0].ImageId' --output text)
          echo "AMI=$AMI" >> $GITHUB_ENV
        working-directory: projects/datapub/packer

      - name: Deploy datapub staging CloudFormation stack
        if: github.ref_name == 'staging'
        uses: aws-actions/aws-cloudformation-github-deploy@v1.0.4
        with:
          name: Datapub
          no-fail-on-empty-changeset: '1'
          parameter-overrides: "AMI=${{ env.AMI }},AutoScalingMaxSize=2,AutoScalingMinSize=1,DatapubBucket=${{ needs.get-global-resources.outputs.datapub-bucket }},DatapubFilesDomainName=files.${{ needs.get-global-resources.outputs.datapub-zone-apex }},Env=staging,InstanceType=t3a.small,KeyName=john-20.04,RDSAllocatedStorage=100,RDSInstanceClass=db.t4g.micro,RDSStorageType=gp2,SlackToken=${{ secrets.DATAPUB_SLACK_TOKEN }}"
          role-arn: ${{ needs.get-global-resources.outputs.service-role-arn }}
          template: components/cloudformation-templates/out/datapub.template

      - name: Deploy datapub prod CloudFormation stack
        if: github.ref_name == 'production'
        uses: aws-actions/aws-cloudformation-github-deploy@v1.0.4
        with:
          name: Datapub
          no-fail-on-empty-changeset: '1'
          parameter-overrides: "AMI=${{ env.AMI }},AutoScalingMaxSize=10,AutoScalingMinSize=1,DatapubBucket=${{ needs.get-global-resources.outputs.datapub-bucket }},DatapubFilesDomainName=files.${{ needs.get-global-resources.outputs.datapub-zone-apex }},Env=prod,RDSAllocatedStorage=500,InstanceType=t3.medium,RDSInstanceClass=db.m6g.large,RDSIops=3000,RDSStorageType=io1,SlackToken=${{ secrets.DATAPUB_SLACK_TOKEN }}"
          role-arn: ${{ needs.get-global-resources.outputs.service-role-arn }}
          template: components/cloudformation-templates/out/datapub.template

      - run: |
          nix-store --dump-db > ~/nix-db-dump
        if: steps.nix-cache.outputs.cache-hit != 'true'
