name: "Test and Deploy Datapub"
concurrency: sysrev-datapub-${{ github.ref_name }}

on:
  push:
    paths:
      - '.github/workflows/datapub.yml'
      - 'projects/datapub/**'
      - '!**.md'

jobs:
  datapub:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Install Nix
        uses: cachix/install-nix-action@v18
        with:
          nix_path: nixpkgs=channel:nixos-22.11

      - name: Restore cached Nix store
        id: nix-cache-restore
        uses: john-shaffer/cache/restore@main
        with:
          key: nix-${{ github.repository }}-${{ runner.os }}-${{ hashFiles('**.nix', '**/flake.lock') }}
          restore-keys: |
            nix-${{ github.repository }}-${{ runner.os }}-
          path: |
            /nix/store
            /nix/var/nix/db/db.sqlite

      - name: Build Nix derivations
        if: steps.nix-cache-restore.outputs.cache-hit != 'true'
        run: |
          nix develop -c bash bin/prep-nix
      - name: Save cached Nix store

        if: steps.nix-cache-restore.outputs.cache-hit != 'true'
        uses: actions/cache/save@v3
        with:
          key: nix-${{ github.repository }}-${{ runner.os }}-${{ hashFiles('**.nix', '**/flake.lock') }}
          path: |
            /nix/store
            /nix/var/nix/db/db.sqlite

      - name: Restore cached Clojure dependencies
        id: clj-cache-restore
        uses: actions/cache/restore@v3
        with:
          key: clj-${{ github.repository }}-${{ hashFiles('**/deps.edn') }}
          restore-keys: clj-${{ github.repository }}-
          path: |
            ~/.gitlibs
            ~/.m2/repository

      - name: Pull Sysrev Clojure dependencies
        if: steps.clj-cache-restore.outputs.cache-hit != 'true'
        run: |
          nix develop -c bash bin/prep-clojure

      - name: Save cached Clojure dependencies
        if: steps.clj-cache-restore.outputs.cache-hit != 'true'
        uses: actions/cache/save@v3
        with:
          key: clj-${{ github.repository }}-${{ hashFiles('**/deps.edn') }}
          path: |
            ~/.gitlibs
            ~/.m2/repository

      - name: Run tests
        run: |
          nix develop -c bash test.sh
        timeout-minutes: 20
        working-directory: projects/datapub
        env:
          AWS_REGION: us-east-1

      - name: Build datapub staging uberjar
        if: github.ref_name == 'staging'
        run: nix develop -c clojure -X:uberjar-staging
        working-directory: projects/datapub

      - name: Build datapub prod uberjar
        if: github.ref_name == 'production'
        run: nix develop -c clojure -X:uberjar
        working-directory: projects/datapub

      - name: Configure AWS staging credentials
        if: github.ref_name == 'staging'
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_STAGING }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_STAGING }}
          aws-region: us-east-1
          mask-aws-account-id: no

      - name: Configure AWS prod credentials
        if: github.ref_name == 'production'
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
          aws-region: us-east-1
          mask-aws-account-id: no

      - name: Build datapub AMI
        if: github.ref_name == 'staging' || github.ref_name == 'production'
        run: |
          export UUID=$(uuidgen)
          nix develop -c packer build -var git-ref=$GITHUB_REF -var git-sha=$GITHUB_SHA -var uuid=$UUID datapub.pkr.hcl
          export AMI=$(aws ec2 describe-images --filters Name='tag:sysrev:build:uuid',Values=$UUID --query 'Images[0].ImageId' --output text)
          echo "DATAPUB_AMI=$AMI" >> $GITHUB_ENV
          echo "DATAPUB_SLACK_TOKEN=${{ secrets.DATAPUB_SLACK_TOKEN }}" >> $GITHUB_ENV
        working-directory: projects/datapub/packer

      - name: Deploy CloudFormation stacks to staging
        if: github.ref_name == 'staging'
        run: |
          nix develop -c clojure -X:dev sysrev.infra.core/deploy! :groups [:datapub]

      - name: Deploy CloudFormation stacks to production
        if: github.ref_name == 'production'
        run: |
          nix develop -c clojure -X:prod:dev sysrev.infra.core/deploy! :groups [:datapub]

      - name: Log job run to Slack
        uses: 8398a7/action-slack@v3.14.0
        if: always()
        with:
          status: custom
          fields: workflow,job,commit,repo,ref,author,took
          custom_payload: |
            {
              attachments: [{
                color: '${{ job.status }}' === 'success' ? 'good' : '${{ job.status }}' === 'failure' ? 'danger' : 'warning',
                text: `${process.env.AS_WORKFLOW}\n${process.env.AS_JOB} (${process.env.AS_COMMIT}) of ${process.env.AS_REPO}@${process.env.AS_REF} by ${process.env.AS_AUTHOR} ${{ job.status }} in ${process.env.AS_TOOK}`,
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
