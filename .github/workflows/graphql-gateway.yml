name: "Build and Deploy Federated GraphQL Gateway"
concurrency: sysrev-graphql-gateway-${{ github.ref_name }}

on:
  push:
    paths:
      - '.github/workflows/graphql-gateway.yml'
      - 'projects/graphql-gateway/**'
      - '**.graphql'
      - '!**.md'

jobs:
  get-global-resources:
    outputs:
      code-bucket: ${{ steps.get-stack-outputs.outputs.CodeBucket }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS staging credentials
        if: github.ref_name == 'staging'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_STAGING }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_STAGING }}
          aws-region: us-east-1

      - name: Configure AWS prod credentials
        if: github.ref_name == 'production'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
          aws-region: us-east-1

      - name: Get Sysrev-Global-Resources stack outputs
        if: github.ref_name == 'staging' || github.ref_name == 'production'
        id: get-stack-outputs
        uses: john-shaffer/aws-cloudformation-github-deploy@skip-deploy
        with:
          name: Sysrev-Global-Resources
          skip-deploy: '1'
          template: 'unused'

  graphql-gateway:
    needs: get-global-resources
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Cache npm dependencies
        uses: actions/cache@v3
        with:
          key: npm-graphql-gateway-${{ hashFiles('**/package-lock.json') }}
          restore-keys: npm-graphql-gateway
          path: |
            **/node_modules

      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@v4

      - name: Run the Magic Nix Cache
        uses: DeterminateSystems/magic-nix-cache-action@v2

      - name: Restore cached Clojure dependencies
        id: clj-cache-restore
        uses: actions/cache/restore@v3
        with:
          key: clj-${{ github.repository }}-${{ hashFiles('**/deps.edn') }}
          restore-keys: clj-${{ github.repository }}-
          path: |
            ~/.gitlibs
            ~/.m2/repository

      - name: Prepare Clojure dependencies
        if: steps.clj-cache-restore.outputs.cache-hit != 'true'
        run: |
          nix develop -c bash bin/prep-clojure

      - name: Save cached Clojure dependencies
        if: steps.clj-cache-restore.outputs.cache-hit != 'true'
        uses: actions/cache/save@v3
        with:
          key: clj-${{ github.repository }}-${{ hashFiles('**/deps.edn') }}
          path: |
            ~/.gitlibs
            ~/.m2/repository

      - name: Set APOLLO_ELV2_LICENSE to avoid license prompt
        run: echo "APOLLO_ELV2_LICENSE=accept" >> $GITHUB_ENV

      - name: Install rover
        run: |
          curl -sSL https://rover.apollo.dev/nix/v0.12.2 | sh
          echo "$HOME/.rover/bin" >> $GITHUB_PATH

      - name: Upload subgraph schemas to Apollo Studio
        run: |
          rover subgraph publish sysrev@current --name datapub --schema projects/datapub/resources/datapub/schema.graphql --routing-url https://www.datapub.dev/api
        env:
          APOLLO_KEY: ${{ secrets.APOLLO_KEY }}

      - name: Compose the staging supergraph schema
        if: github.ref_name != 'production'
        run: rover supergraph compose --config ./supergraph-config-staging.yaml > ./supergraph.graphql
        working-directory: projects/graphql-gateway

      - name: Compose the production supergraph schema
        if: github.ref_name != 'staging'
        run: rover supergraph compose --config ./supergraph-config.yaml > ./supergraph.graphql
        working-directory: projects/graphql-gateway

      - name: Build gateway lambda code
        run: |
          nix develop -c npm ci
          nix develop -c zip -qr lambda.zip *
        working-directory: projects/graphql-gateway

      - name: Configure AWS staging credentials
        if: github.ref_name == 'staging'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_STAGING }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_STAGING }}
          aws-region: us-east-1

      - name: Configure AWS prod credentials
        if: github.ref_name == 'production'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
          aws-region: us-east-1

      - name: Set APOLLO_KEY
        if: github.ref_name == 'production'
        run: echo "APOLLO_KEY=${{ secrets.APOLLO_KEY }}" >> $GITHUB_ENV

      - name: Set lambda key
        run: echo "LAMBDA_KEY=graphql-gateway/lambda-$GITHUB_SHA.zip" >> $GITHUB_ENV

      - name: Upload lambda code to S3
        if: github.ref_name == 'staging' || github.ref_name == 'production'
        run:
          nix develop -c aws s3 cp projects/graphql-gateway/lambda.zip s3://${{ needs.get-global-resources.outputs.code-bucket }}/${{ env.LAMBDA_KEY }}

      - name: Deploy CloudFormation stacks to staging
        if: github.ref_name == 'staging'
        run: |
          nix develop -c clojure -X:dev sysrev.infra.core/deploy! :groups [:graphql-gateway]

      - name: Deploy CloudFormation stacks to production
        if: github.ref_name == 'production'
        run: |
          nix develop -c clojure -X:prod:dev sysrev.infra.core/deploy! :groups [:graphql-gateway]

      - name: Log job run to Slack
        uses: 8398a7/action-slack@v3.15.1
        if: always()
        with:
          status: custom
          fields: workflow,job,commit,repo,ref,author,took
          custom_payload: |
            {
              attachments: [{
                color: '${{ job.status }}' === 'success' ? 'good' : '${{ job.status }}' === 'failure' ? 'danger' : 'warning',
                text: `${process.env.AS_WORKFLOW}\n${process.env.AS_JOB} (${process.env.AS_COMMIT}) of ${process.env.AS_REPO}@${process.env.AS_REF} by ${process.env.AS_AUTHOR} ${{ job.status }} in ${process.env.AS_TOOK}`,
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
