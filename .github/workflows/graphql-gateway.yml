name: "Build and Deploy Federated GraphQL Gateway"
concurrency: sysrev-graphql-gateway-${{ github.ref_name }}

on:
  push:
    paths:
      - '.github/workflows/graphql-gateway.yml'
      - 'projects/graphql-gateway/**'
      - '**.graphql'
      - '!**.md'

jobs:
  get-global-resources:
    outputs:
      code-bucket: ${{ steps.get-stack-outputs.outputs.CodeBucket }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS staging credentials
        if: github.ref_name == 'staging'
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_STAGING }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_STAGING }}
          aws-region: us-east-1
          mask-aws-account-id: no

      - name: Configure AWS prod credentials
        if: github.ref_name == 'production'
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
          aws-region: us-east-1
          mask-aws-account-id: no

      - name: Get Sysrev-Global-Resources stack outputs
        if: github.ref_name == 'staging' || github.ref_name == 'production'
        id: get-stack-outputs
        uses: john-shaffer/aws-cloudformation-github-deploy@skip-deploy
        with:
          name: Sysrev-Global-Resources
          skip-deploy: '1'
          template: 'unused'

  graphql-gateway:
    needs: get-global-resources
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Cache Clojure dependencies
        uses: actions/cache@v3
        timeout-minutes: 5
        with:
          key: clj-sysrev-${{ hashFiles('**/deps.edn') }}
          restore-keys: clj-sysrev-
          path: |
            ~/.gitlibs
            ~/.m2/repository

      - name: Cache npm dependencies
        uses: actions/cache@v3
        with:
          key: npm-graphql-gateway-${{ hashFiles('**/package-lock.json') }}
          restore-keys: npm-graphql-gateway
          path: |
            **/node_modules

      - name: Install Nix
        uses: cachix/install-nix-action@v18
        timeout-minutes: 5
        with:
          nix_path: nixpkgs=channel:nixos-21.11

      - name: Cache Nix store
        id: nix-cache
        uses: john-shaffer/cache@sudo-tar
        timeout-minutes: 10
        with:
          key: nix-sysrev-${{ hashFiles('**.nix') }}
          restore-keys: nix-sysrev-
          path: |
            ~/nix-db-dump
            /nix/store
            /nix/var/nix/profiles

      - run: sudo `command -v nix-store` --load-db < ~/nix-db-dump || true
        if: steps.nix-cache.outputs.cache-hit == 'true'

      - name: Build Nix derivation
        run: |
          mkdir -p ~/.config/nixpkgs
          echo "{ allowUnfree = true; }" > ~/.config/nixpkgs/config.nix
          nix-build -A inputDerivation -o gcroots

      - name: Set APOLLO_ELV2_LICENSE to avoid license prompt
        run: echo "APOLLO_ELV2_LICENSE=accept" >> $GITHUB_ENV

      - name: Install rover
        run: |
          curl -sSL https://rover.apollo.dev/nix/v0.5.1 | sh
          echo "$HOME/.rover/bin" >> $GITHUB_PATH

      - name: Upload subgraph schemas to Apollo Studio
        run: |
          rover subgraph publish sysrev@current --name datapub --schema projects/datapub/resources/datapub/schema.graphql --routing-url https://www.datapub.dev/api
        env:
          APOLLO_KEY: ${{ secrets.APOLLO_KEY }}

      - name: Compose the staging supergraph schema
        if: github.ref_name != 'production'
        run: rover supergraph compose --config ./supergraph-config-staging.yaml > ./supergraph.graphql
        working-directory: projects/graphql-gateway

      - name: Compose the production supergraph schema
        if: github.ref_name != 'staging'
        run: rover supergraph compose --config ./supergraph-config.yaml > ./supergraph.graphql
        working-directory: projects/graphql-gateway

      - name: Build gateway lambda code
        run: |
          nix-shell ../../default.nix --run "npm ci"
          nix-shell ../../default.nix --run "zip -qr lambda.zip *"
        working-directory: projects/graphql-gateway

      - name: Configure AWS staging credentials
        if: github.ref_name == 'staging'
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_STAGING }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_STAGING }}
          aws-region: us-east-1
          mask-aws-account-id: no

      - name: Configure AWS prod credentials
        if: github.ref_name == 'production'
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
          aws-region: us-east-1
          mask-aws-account-id: no

      - name: Set APOLLO_KEY
        if: github.ref_name == 'production'
        run: echo "APOLLO_KEY=${{ secrets.APOLLO_KEY }}" >> $GITHUB_ENV

      - name: Set lambda key
        run: echo "LAMBDA_KEY=graphql-gateway/lambda-$GITHUB_SHA.zip" >> $GITHUB_ENV

      - name: Upload lambda code to S3
        if: github.ref_name == 'staging' || github.ref_name == 'production'
        run:
          nix-shell --run "aws s3 cp projects/graphql-gateway/lambda.zip s3://${{ needs.get-global-resources.outputs.code-bucket }}/${{ env.LAMBDA_KEY }}"

      - name: Deploy CloudFormation stacks to staging
        if: github.ref_name == 'staging'
        run: |
          nix-shell --run "clojure -X:dev sysrev.infra.core/deploy! :groups [:graphql-gateway]"

      - name: Deploy CloudFormation stacks to production
        if: github.ref_name == 'production'
        run: |
          nix-shell --run "clojure -X:prod:dev sysrev.infra.core/deploy! :groups [:graphql-gateway]"

      - run: |
          nix-store --dump-db > ~/nix-db-dump
        if: steps.nix-cache.outputs.cache-hit != 'true'

      - name: Log job run to Slack
        uses: 8398a7/action-slack@v3.14.0
        if: always()
        with:
          status: custom
          fields: workflow,job,commit,repo,ref,author,took
          custom_payload: |
            {
              attachments: [{
                color: '${{ job.status }}' === 'success' ? 'good' : '${{ job.status }}' === 'failure' ? 'danger' : 'warning',
                text: `${process.env.AS_WORKFLOW}\n${process.env.AS_JOB} (${process.env.AS_COMMIT}) of ${process.env.AS_REPO}@${process.env.AS_REF} by ${process.env.AS_AUTHOR} ${{ job.status }} in ${process.env.AS_TOOK}`,
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
