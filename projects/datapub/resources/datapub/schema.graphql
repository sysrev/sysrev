# Guidelines for schema design:
# https://graphqlmastery.com/blog/graphql-best-practices-for-graphql-schema-design

# *Connection, *Edge, and PageInfo from the GraphQL Cursor Connections Specification:
# https://relay.dev/graphql/connections.htm

"A DateTime in ISO-8061 instant format, such as \"2011-12-03T10:15:30Z\"."
scalar DateTime
scalar NonNegativeInt
scalar PositiveInt
scalar Upload

enum DatasetIndexType {
  TEXT
}

enum SearchDatasetQueryInputType {
  AND
  OR
}

"A Dataset is a searchable set of DatasetEntity objects."
type Dataset {
  "The unique id of the Dataset."
  id: PositiveInt!

  "A description of the Dataset."
  description: String

  "The entities belonging to this Dataset."
  entities(
    after: String
    externalId: String
    first: NonNegativeInt
    groupingId: String
  ): DatasetEntitiesConnection!

  "The indices on the DatasetEntity objects of this Dataset."
  indices: [DatasetIndex]

  "The name of the Dataset."
  name: String!

  "Whether the Dataset is public."
  public: Boolean!
}

type DatasetEntitiesConnection {
  edges: [DatasetEntitiesEdge]
  pageInfo: PageInfo!
  totalCount: NonNegativeInt
}

type DatasetEntitiesEdge {
  cursor: String!
  node: DatasetEntity
}

type DatasetEntity {
  "The unique id."
  id: PositiveInt!

  "The string representation of the content. This will be null when the content is large. Use contentUrl in that case."
  content: String

  "A url at which the entity content can be accessed."
  contentUrl: String!

  "The datetime the source data was created. Used to determine which entity to return when there are multiple entities with the same externalId and uniqueExternalIds is true."
  externalCreated: DateTime

  "An opaque external id."
  externalId: String

  groupingId: String

  "The media type, such as \"application/json\"."
  mediaType: String!

  "The string representation of the metadata in JSON format."
  metadata: String
}

type DatasetIndex {
  "The path to index, i.e., [\"Article\" \"Abstract\"]."
  path: String!

  "The type of value to index."
  type: DatasetIndexType!
}

type ListDatasetsConnection {
  edges: [ListDatasetsEdge]
  pageInfo: PageInfo!
  totalCount: NonNegativeInt
}

type ListDatasetsEdge {
  cursor: String!
  node: Dataset
}

"PageInfo as defined by the GraphQL Cursor Connections Specification: https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo"
type PageInfo {
  "The cursor corresponding to the last node in edges."
  endCursor: String!

  "Used to indicate whether more edges exist following the set defined by the client's arguments."
  hasNextPage: Boolean!

  "Used to indicate whether more edges exist prior to the set defined by the client's arguments."
  hasPreviousPage: Boolean!

  "The cursor corresponding to the first node in edges."
  startCursor: String!
}

input CreateDatasetEntityInput {
  content: String
  contentUpload: Upload
  datasetId: PositiveInt!
  externalCreated: DateTime
  externalId: String
  groupingId: String
  mediaType: String!
  metadata: String
}

input CreateDatasetIndexInput {
  datasetId: PositiveInt!
  path: String!
  type: DatasetIndexType!
}

input CreateDatasetInput {
  description: String
  name: String!
  public: Boolean
}

input DatasetEntitiesInput {
  datasetId: PositiveInt!
  uniqueExternalIds: Boolean
  uniqueGroupingIds: Boolean
}

input SearchDatasetInput {
  datasetId: PositiveInt!
  query: SearchDatasetQueryInput!
  uniqueExternalIds: Boolean
  uniqueGroupingIds: Boolean
}

input SearchDatasetQueryInput {
  query: [SearchDatasetQueryInput]
  string: [SearchDatasetQueryStringInput]
  text: [SearchDatasetQueryTextInput]
  type: SearchDatasetQueryInputType!
}

input SearchDatasetQueryStringInput {
  eq: String!
  ignoreCase: Boolean
  path: String!
}

"Do a text search against the specified text indices, or every text index."
input SearchDatasetQueryTextInput {
  paths: [String]
  search: String!
  useEveryIndex: Boolean
}

input UpdateDatasetInput {
  description: String
  id: PositiveInt!
  name: String
  public: Boolean
}

type Query {
  dataset(id: PositiveInt!) : Dataset
  datasetEntitiesById(
    after: String
    first: NonNegativeInt
    ids: [PositiveInt]
  ) : DatasetEntitiesConnection
  datasetEntity(id: PositiveInt!) : DatasetEntity
  listDatasets(
    after: String
    first: NonNegativeInt
  ) : ListDatasetsConnection
}

type Mutation {
  createDataset(input: CreateDatasetInput!) : Dataset
  createDatasetEntity(input: CreateDatasetEntityInput!) : DatasetEntity
  createDatasetIndex(input: CreateDatasetIndexInput!) : DatasetIndex
  updateDataset(input: UpdateDatasetInput!) : Dataset
}

type Subscription {
  datasetEntities(input: DatasetEntitiesInput!): DatasetEntity
  searchDataset(input: SearchDatasetInput!): DatasetEntity
}

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}
