{
  "AWSTemplateFormatVersion" : "2010-09-09",
  "Conditions" : {
    "3AZs" : {
      "Fn::Or" : [ {
        "Fn::Equals" : [ 3, {
          "Ref" : "NumberOfAZs"
        } ]
      }, {
        "Fn::Equals" : [ 4, {
          "Ref" : "NumberOfAZs"
        } ]
      }, {
        "Fn::Equals" : [ 5, {
          "Ref" : "NumberOfAZs"
        } ]
      }, {
        "Fn::Equals" : [ 6, {
          "Ref" : "NumberOfAZs"
        } ]
      } ]
    },
    "4AZs" : {
      "Fn::Or" : [ {
        "Fn::Equals" : [ 4, {
          "Ref" : "NumberOfAZs"
        } ]
      }, {
        "Fn::Equals" : [ 5, {
          "Ref" : "NumberOfAZs"
        } ]
      }, {
        "Fn::Equals" : [ 6, {
          "Ref" : "NumberOfAZs"
        } ]
      } ]
    },
    "5AZs" : {
      "Fn::Or" : [ {
        "Fn::Equals" : [ 5, {
          "Ref" : "NumberOfAZs"
        } ]
      }, {
        "Fn::Equals" : [ 6, {
          "Ref" : "NumberOfAZs"
        } ]
      } ]
    },
    "6AZs" : {
      "Fn::Equals" : [ 6, {
        "Ref" : "NumberOfAZs"
      } ]
    }
  },
  "Description" : "This template creates the regional resources needed by Sysrev services.",
  "Outputs" : {
    "CloudFrontOAI" : {
      "Export" : {
        "Name" : {
          "Fn::Sub" : "${AWS::StackName}-CloudFrontOAI"
        }
      },
      "Value" : {
        "Ref" : "CloudFrontOAI"
      }
    },
    "CodeBucket" : {
      "Export" : {
        "Name" : {
          "Fn::Sub" : "${AWS::StackName}-CodeBucket"
        }
      },
      "Value" : {
        "Ref" : "CodeBucket"
      }
    },
    "CredentialsKeyId" : {
      "Export" : {
        "Name" : {
          "Fn::Sub" : "${AWS::StackName}-CredentialsKeyId"
        }
      },
      "Value" : {
        "Ref" : "CredentialsKey"
      }
    },
    "CredentialsKeyUsePolicyArn" : {
      "Export" : {
        "Name" : {
          "Fn::Sub" : "${AWS::StackName}-CredentialsKeyUsePolicyArn"
        }
      },
      "Value" : {
        "Ref" : "CredentialsKeyUsePolicy"
      }
    },
    "DatapubDomainName" : {
      "Export" : {
        "Name" : {
          "Fn::Sub" : "${AWS::StackName}-DatapubDomainName"
        }
      },
      "Value" : {
        "Fn::Join" : [ ".", [ "www", {
          "Ref" : "DatapubZoneApex"
        } ] ]
      }
    },
    "DatapubHostedZoneId" : {
      "Export" : {
        "Name" : {
          "Fn::Sub" : "${AWS::StackName}-DatapubHostedZoneId"
        }
      },
      "Value" : {
        "Ref" : "DatapubHostedZoneId"
      }
    },
    "DatapubZoneApex" : {
      "Export" : {
        "Name" : {
          "Fn::Sub" : "${AWS::StackName}-DatapubZoneApex"
        }
      },
      "Value" : {
        "Ref" : "DatapubZoneApex"
      }
    },
    "LoadBalancerArn" : {
      "Export" : {
        "Name" : {
          "Fn::Sub" : "${AWS::StackName}-LoadBalancerArn"
        }
      },
      "Value" : {
        "Ref" : "LoadBalancer"
      }
    },
    "LoadBalancerCanonicalHostedZoneId" : {
      "Export" : {
        "Name" : {
          "Fn::Sub" : "${AWS::StackName}-LoadBalancerCanonicalHostedZoneId"
        }
      },
      "Value" : {
        "Fn::GetAtt" : [ "LoadBalancer", "CanonicalHostedZoneID" ]
      }
    },
    "LoadBalancerDNSName" : {
      "Export" : {
        "Name" : {
          "Fn::Sub" : "${AWS::StackName}-LoadBalancerDNSName"
        }
      },
      "Value" : {
        "Fn::GetAtt" : [ "LoadBalancer", "DNSName" ]
      }
    },
    "LoadBalancerHTTPSListenerArn" : {
      "Export" : {
        "Name" : {
          "Fn::Sub" : "${AWS::StackName}-LoadBalancerHTTPSListenerArn"
        }
      },
      "Value" : {
        "Ref" : "LoadBalancerHTTPSListener"
      }
    },
    "LoadBalancerName" : {
      "Export" : {
        "Name" : {
          "Fn::Sub" : "${AWS::StackName}-LoadBalancerName"
        }
      },
      "Value" : {
        "Fn::GetAtt" : [ "LoadBalancer", "LoadBalancerName" ]
      }
    },
    "LoadBalancerSecurityGroupId" : {
      "Export" : {
        "Name" : {
          "Fn::Sub" : "${AWS::StackName}-LoadBalancerSecurityGroupId"
        }
      },
      "Value" : {
        "Ref" : "LoadBalancerSecurityGroup"
      }
    },
    "LogsKeyArn" : {
      "Export" : {
        "Name" : {
          "Fn::Sub" : "${AWS::StackName}-LogsKeyArn"
        }
      },
      "Value" : {
        "Fn::GetAtt" : [ "LogsKey", "Arn" ]
      }
    },
    "RDSSubnetGroupName" : {
      "Export" : {
        "Name" : {
          "Fn::Sub" : "${AWS::StackName}-RDSSubnetGroupName"
        }
      },
      "Value" : {
        "Ref" : "RDSSubnetGroup"
      }
    },
    "SysrevHostedZoneId" : {
      "Export" : {
        "Name" : {
          "Fn::Sub" : "${AWS::StackName}-SysrevHostedZoneId"
        }
      },
      "Value" : {
        "Ref" : "SysrevHostedZoneId"
      }
    },
    "SysrevZoneApex" : {
      "Export" : {
        "Name" : {
          "Fn::Sub" : "${AWS::StackName}-SysrevZoneApex"
        }
      },
      "Value" : {
        "Ref" : "SysrevZoneApex"
      }
    },
    "VpcId" : {
      "Export" : {
        "Name" : {
          "Fn::Sub" : "${AWS::StackName}-VpcId"
        }
      },
      "Value" : {
        "Ref" : "Vpc"
      }
    },
    "VpcSubnetIds" : {
      "Export" : {
        "Name" : {
          "Fn::Sub" : "${AWS::StackName}-VpcSubnetIds"
        }
      },
      "Value" : {
        "Fn::Join" : [ ",", {
          "Fn::If" : [ "6AZs", [ {
            "Ref" : "SubnetA"
          }, {
            "Ref" : "SubnetB"
          }, {
            "Ref" : "SubnetC"
          }, {
            "Ref" : "SubnetD"
          }, {
            "Ref" : "SubnetE"
          }, {
            "Ref" : "SubnetF"
          } ], {
            "Fn::If" : [ "5AZs", [ {
              "Ref" : "SubnetA"
            }, {
              "Ref" : "SubnetB"
            }, {
              "Ref" : "SubnetC"
            }, {
              "Ref" : "SubnetD"
            }, {
              "Ref" : "SubnetE"
            } ], {
              "Fn::If" : [ "4AZs", [ {
                "Ref" : "SubnetA"
              }, {
                "Ref" : "SubnetB"
              }, {
                "Ref" : "SubnetC"
              }, {
                "Ref" : "SubnetD"
              } ], {
                "Fn::If" : [ "3AZs", [ {
                  "Ref" : "SubnetA"
                }, {
                  "Ref" : "SubnetB"
                }, {
                  "Ref" : "SubnetC"
                } ], [ {
                  "Ref" : "SubnetA"
                }, {
                  "Ref" : "SubnetB"
                } ] ]
              } ]
            } ]
          } ]
        } ]
      }
    }
  },
  "Parameters" : {
    "CloudFrontOAI" : {
      "Type" : "String"
    },
    "CodeBucket" : {
      "MaxLength" : 63,
      "MinLength" : 3,
      "Type" : "String"
    },
    "DatapubHostedZoneId" : {
      "Type" : "AWS::Route53::HostedZone::Id"
    },
    "DatapubZoneApex" : {
      "Description" : "The DNS zone apex for Datapub with no final period, e.g., \"datapub.dev\"",
      "Type" : "String"
    },
    "NumberOfAZs" : {
      "Default" : 3,
      "MaxValue" : 6,
      "MinValue" : 2,
      "Type" : "Number"
    },
    "SysrevHostedZoneId" : {
      "Type" : "String"
    },
    "SysrevZoneApex" : {
      "Description" : "The DNS zone apex for Sysrev with no final period, e.g., \"sysrev.com\"",
      "Type" : "String"
    }
  },
  "Resources" : {
    "CredentialsKey" : {
      "Properties" : {
        "KeyPolicy" : {
          "Statement" : {
            "Action" : "kms:*",
            "Effect" : "Allow",
            "Principal" : {
              "AWS" : {
                "Fn::Sub" : "arn:aws:iam::${AWS::AccountId}:root"
              }
            },
            "Resource" : "*"
          },
          "Version" : "2012-10-17"
        }
      },
      "Type" : "AWS::KMS::Key"
    },
    "CredentialsKeyUsePolicy" : {
      "Properties" : {
        "PolicyDocument" : {
          "Statement" : {
            "Action" : [ "kms:Encrypt", "kms:Decrypt" ],
            "Effect" : "Allow",
            "Resource" : [ {
              "Fn::Join" : [ "", [ "arn:aws:kms:", {
                "Ref" : "AWS::Region"
              }, ":", {
                "Ref" : "AWS::AccountId"
              }, ":key/", {
                "Ref" : "CredentialsKey"
              } ] ]
            } ]
          },
          "Version" : "2012-10-17"
        }
      },
      "Type" : "AWS::IAM::ManagedPolicy"
    },
    "DatapubCertificate" : {
      "Properties" : {
        "DomainName" : {
          "Fn::Join" : [ ".", [ "www", {
            "Ref" : "DatapubZoneApex"
          } ] ]
        },
        "DomainValidationOptions" : [ {
          "DomainName" : {
            "Fn::Join" : [ ".", [ "www", {
              "Ref" : "DatapubZoneApex"
            } ] ]
          },
          "HostedZoneId" : {
            "Ref" : "DatapubHostedZoneId"
          }
        } ],
        "ValidationMethod" : "DNS"
      },
      "Type" : "AWS::CertificateManager::Certificate"
    },
    "GatewayAttachment" : {
      "Properties" : {
        "InternetGatewayId" : {
          "Ref" : "InternetGateway"
        },
        "VpcId" : {
          "Ref" : "Vpc"
        }
      },
      "Type" : "AWS::EC2::VPCGatewayAttachment"
    },
    "InternetGateway" : {
      "Type" : "AWS::EC2::InternetGateway"
    },
    "InternetRouteIpv4" : {
      "Properties" : {
        "DestinationCidrBlock" : "0.0.0.0/0",
        "GatewayId" : {
          "Ref" : "InternetGateway"
        },
        "RouteTableId" : {
          "Ref" : "RouteTable"
        }
      },
      "Type" : "AWS::EC2::Route"
    },
    "InternetRouteIpv6" : {
      "Properties" : {
        "DestinationIpv6CidrBlock" : "::/0",
        "GatewayId" : {
          "Ref" : "InternetGateway"
        },
        "RouteTableId" : {
          "Ref" : "RouteTable"
        }
      },
      "Type" : "AWS::EC2::Route"
    },
    "LoadBalancer" : {
      "DependsOn" : [ "LoggingBucketELBWritePolicy" ],
      "Properties" : {
        "IpAddressType" : "dualstack",
        "LoadBalancerAttributes" : [ {
          "Key" : "access_logs.s3.enabled",
          "Value" : "true"
        }, {
          "Key" : "access_logs.s3.bucket",
          "Value" : {
            "Ref" : "LoggingBucket"
          }
        } ],
        "SecurityGroups" : [ {
          "Fn::GetAtt" : [ "Vpc", "DefaultSecurityGroup" ]
        }, {
          "Ref" : "LoadBalancerSecurityGroup"
        } ],
        "Subnets" : {
          "Fn::If" : [ "6AZs", [ {
            "Ref" : "SubnetA"
          }, {
            "Ref" : "SubnetB"
          }, {
            "Ref" : "SubnetC"
          }, {
            "Ref" : "SubnetD"
          }, {
            "Ref" : "SubnetE"
          }, {
            "Ref" : "SubnetF"
          } ], {
            "Fn::If" : [ "5AZs", [ {
              "Ref" : "SubnetA"
            }, {
              "Ref" : "SubnetB"
            }, {
              "Ref" : "SubnetC"
            }, {
              "Ref" : "SubnetD"
            }, {
              "Ref" : "SubnetE"
            } ], {
              "Fn::If" : [ "4AZs", [ {
                "Ref" : "SubnetA"
              }, {
                "Ref" : "SubnetB"
              }, {
                "Ref" : "SubnetC"
              }, {
                "Ref" : "SubnetD"
              } ], {
                "Fn::If" : [ "3AZs", [ {
                  "Ref" : "SubnetA"
                }, {
                  "Ref" : "SubnetB"
                }, {
                  "Ref" : "SubnetC"
                } ], [ {
                  "Ref" : "SubnetA"
                }, {
                  "Ref" : "SubnetB"
                } ] ]
              } ]
            } ]
          } ]
        },
        "Type" : "application"
      },
      "Type" : "AWS::ElasticLoadBalancingV2::LoadBalancer"
    },
    "LoadBalancerHTTPListener" : {
      "Properties" : {
        "DefaultActions" : [ {
          "RedirectConfig" : {
            "Host" : "#{host}",
            "Path" : "/#{path}",
            "Port" : "443",
            "Protocol" : "HTTPS",
            "Query" : "#{query}",
            "StatusCode" : "HTTP_301"
          },
          "Type" : "redirect"
        } ],
        "LoadBalancerArn" : {
          "Ref" : "LoadBalancer"
        },
        "Port" : 80,
        "Protocol" : "HTTP"
      },
      "Type" : "AWS::ElasticLoadBalancingV2::Listener"
    },
    "LoadBalancerHTTPSListener" : {
      "Properties" : {
        "Certificates" : [ {
          "CertificateArn" : {
            "Ref" : "DatapubCertificate"
          }
        } ],
        "DefaultActions" : [ {
          "FixedResponseConfig" : {
            "ContentType" : "text/plain",
            "MessageBody" : "503 Service Unavailable\n\nNo targets configured for this domain.",
            "StatusCode" : "503"
          },
          "Type" : "fixed-response"
        } ],
        "LoadBalancerArn" : {
          "Ref" : "LoadBalancer"
        },
        "Port" : 443,
        "Protocol" : "HTTPS"
      },
      "Type" : "AWS::ElasticLoadBalancingV2::Listener"
    },
    "LoadBalancerSecurityGroup" : {
      "Properties" : {
        "GroupDescription" : "HTTP/S ALBs",
        "SecurityGroupIngress" : [ {
          "CidrIp" : "0.0.0.0/0",
          "FromPort" : 80,
          "IpProtocol" : "tcp",
          "ToPort" : 80
        }, {
          "CidrIpv6" : "::/0",
          "FromPort" : 80,
          "IpProtocol" : "tcp",
          "ToPort" : 80
        }, {
          "CidrIp" : "0.0.0.0/0",
          "FromPort" : 443,
          "IpProtocol" : "tcp",
          "ToPort" : 443
        }, {
          "CidrIpv6" : "::/0",
          "FromPort" : 443,
          "IpProtocol" : "tcp",
          "ToPort" : 443
        } ],
        "VpcId" : {
          "Ref" : "Vpc"
        }
      },
      "Type" : "AWS::EC2::SecurityGroup"
    },
    "LoggingBucket" : {
      "Properties" : {
        "AccessControl" : "Private",
        "PublicAccessBlockConfiguration" : {
          "BlockPublicAcls" : true,
          "BlockPublicPolicy" : true,
          "IgnorePublicAcls" : true,
          "RestrictPublicBuckets" : true
        }
      },
      "Type" : "AWS::S3::Bucket"
    },
    "LoggingBucketELBWritePolicy" : {
      "Properties" : {
        "Bucket" : {
          "Ref" : "LoggingBucket"
        },
        "PolicyDocument" : {
          "Statement" : [ {
            "Action" : "s3:PutObject",
            "Effect" : "Allow",
            "Principal" : {
              "AWS" : "arn:aws:iam::127311923021:root"
            },
            "Resource" : {
              "Fn::Join" : [ "", [ "arn:aws:s3:::", {
                "Ref" : "LoggingBucket"
              }, "/AWSLogs/", {
                "Ref" : "AWS::AccountId"
              }, "/*" ] ]
            }
          }, {
            "Action" : "s3:PutObject",
            "Condition" : {
              "StringEquals" : {
                "s3:x-amz-acl" : "bucket-owner-full-control"
              }
            },
            "Effect" : "Allow",
            "Principal" : {
              "Service" : "delivery.logs.amazonaws.com"
            },
            "Resource" : {
              "Fn::Join" : [ "", [ "arn:aws:s3:::", {
                "Ref" : "LoggingBucket"
              }, "/AWSLogs/", {
                "Ref" : "AWS::AccountId"
              }, "/*" ] ]
            }
          }, {
            "Action" : "s3:GetBucketAcl",
            "Effect" : "Allow",
            "Principal" : {
              "Service" : "delivery.logs.amazonaws.com"
            },
            "Resource" : {
              "Fn::Join" : [ "", [ "arn:aws:s3:::", {
                "Ref" : "LoggingBucket"
              } ] ]
            }
          } ],
          "Version" : "2012-10-17"
        }
      },
      "Type" : "AWS::S3::BucketPolicy"
    },
    "LoggingBucketReadPolicy" : {
      "Properties" : {
        "Groups" : [ "sysrev-developers" ],
        "PolicyDocument" : {
          "Statement" : [ {
            "Action" : [ "s3:GetBucketLocation", "s3:ListBucket" ],
            "Effect" : "Allow",
            "Resource" : {
              "Fn::Join" : [ "", [ "arn:aws:s3:::", {
                "Ref" : "LoggingBucket"
              } ] ]
            }
          }, {
            "Action" : "s3:GetObject",
            "Effect" : "Allow",
            "Resource" : {
              "Fn::Join" : [ "", [ "arn:aws:s3:::", {
                "Ref" : "LoggingBucket"
              }, "/*" ] ]
            }
          } ],
          "Version" : "2012-10-17"
        }
      },
      "Type" : "AWS::IAM::ManagedPolicy"
    },
    "LogsKey" : {
      "Properties" : {
        "KeyPolicy" : {
          "Statement" : [ {
            "Action" : "kms:*",
            "Effect" : "Allow",
            "Principal" : {
              "AWS" : {
                "Fn::Sub" : "arn:aws:iam::${AWS::AccountId}:root"
              }
            },
            "Resource" : "*"
          }, {
            "Action" : [ "kms:Encrypt*", "kms:Decrypt*", "kms:ReEncrypt*", "kms:GenerateDataKey*", "kms:Describe*" ],
            "Condition" : {
              "ArnLike" : {
                "kms:EncryptionContext:aws:logs:arn" : {
                  "Fn::Sub" : "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
                }
              }
            },
            "Effect" : "Allow",
            "Principal" : {
              "Service" : {
                "Fn::Sub" : "logs.${AWS::Region}.amazonaws.com"
              }
            },
            "Resource" : "*"
          } ],
          "Version" : "2012-10-17"
        }
      },
      "Type" : "AWS::KMS::Key"
    },
    "RDSSubnetGroup" : {
      "Properties" : {
        "DBSubnetGroupDescription" : "Sysrev regional resources",
        "SubnetIds" : {
          "Fn::If" : [ "6AZs", [ {
            "Ref" : "SubnetA"
          }, {
            "Ref" : "SubnetB"
          }, {
            "Ref" : "SubnetC"
          }, {
            "Ref" : "SubnetD"
          }, {
            "Ref" : "SubnetE"
          }, {
            "Ref" : "SubnetF"
          } ], {
            "Fn::If" : [ "5AZs", [ {
              "Ref" : "SubnetA"
            }, {
              "Ref" : "SubnetB"
            }, {
              "Ref" : "SubnetC"
            }, {
              "Ref" : "SubnetD"
            }, {
              "Ref" : "SubnetE"
            } ], {
              "Fn::If" : [ "4AZs", [ {
                "Ref" : "SubnetA"
              }, {
                "Ref" : "SubnetB"
              }, {
                "Ref" : "SubnetC"
              }, {
                "Ref" : "SubnetD"
              } ], {
                "Fn::If" : [ "3AZs", [ {
                  "Ref" : "SubnetA"
                }, {
                  "Ref" : "SubnetB"
                }, {
                  "Ref" : "SubnetC"
                } ], [ {
                  "Ref" : "SubnetA"
                }, {
                  "Ref" : "SubnetB"
                } ] ]
              } ]
            } ]
          } ]
        }
      },
      "Type" : "AWS::RDS::DBSubnetGroup"
    },
    "RouteTable" : {
      "Properties" : {
        "VpcId" : {
          "Ref" : "Vpc"
        }
      },
      "Type" : "AWS::EC2::RouteTable"
    },
    "SubnetA" : {
      "DependsOn" : "VpcIpv6CidrBlock",
      "Properties" : {
        "AvailabilityZone" : {
          "Fn::Select" : [ 0, {
            "Fn::GetAZs" : ""
          } ]
        },
        "CidrBlock" : {
          "Fn::Select" : [ 0, {
            "Fn::Cidr" : [ {
              "Fn::GetAtt" : [ "Vpc", "CidrBlock" ]
            }, 6, 12 ]
          } ]
        },
        "Ipv6CidrBlock" : {
          "Fn::Select" : [ 0, {
            "Fn::Cidr" : [ {
              "Fn::Select" : [ 0, {
                "Fn::GetAtt" : [ "Vpc", "Ipv6CidrBlocks" ]
              } ]
            }, 6, 64 ]
          } ]
        },
        "MapPublicIpOnLaunch" : true,
        "VpcId" : {
          "Ref" : "Vpc"
        }
      },
      "Type" : "AWS::EC2::Subnet"
    },
    "SubnetARouteTableAssociation" : {
      "Properties" : {
        "RouteTableId" : {
          "Ref" : "RouteTable"
        },
        "SubnetId" : {
          "Ref" : "SubnetA"
        }
      },
      "Type" : "AWS::EC2::SubnetRouteTableAssociation"
    },
    "SubnetB" : {
      "DependsOn" : "VpcIpv6CidrBlock",
      "Properties" : {
        "AvailabilityZone" : {
          "Fn::Select" : [ 1, {
            "Fn::GetAZs" : ""
          } ]
        },
        "CidrBlock" : {
          "Fn::Select" : [ 1, {
            "Fn::Cidr" : [ {
              "Fn::GetAtt" : [ "Vpc", "CidrBlock" ]
            }, 6, 12 ]
          } ]
        },
        "Ipv6CidrBlock" : {
          "Fn::Select" : [ 1, {
            "Fn::Cidr" : [ {
              "Fn::Select" : [ 0, {
                "Fn::GetAtt" : [ "Vpc", "Ipv6CidrBlocks" ]
              } ]
            }, 6, 64 ]
          } ]
        },
        "MapPublicIpOnLaunch" : true,
        "VpcId" : {
          "Ref" : "Vpc"
        }
      },
      "Type" : "AWS::EC2::Subnet"
    },
    "SubnetBRouteTableAssociation" : {
      "Properties" : {
        "RouteTableId" : {
          "Ref" : "RouteTable"
        },
        "SubnetId" : {
          "Ref" : "SubnetB"
        }
      },
      "Type" : "AWS::EC2::SubnetRouteTableAssociation"
    },
    "SubnetC" : {
      "Condition" : "3AZs",
      "DependsOn" : "VpcIpv6CidrBlock",
      "Properties" : {
        "AvailabilityZone" : {
          "Fn::Select" : [ 2, {
            "Fn::GetAZs" : ""
          } ]
        },
        "CidrBlock" : {
          "Fn::Select" : [ 2, {
            "Fn::Cidr" : [ {
              "Fn::GetAtt" : [ "Vpc", "CidrBlock" ]
            }, 6, 12 ]
          } ]
        },
        "Ipv6CidrBlock" : {
          "Fn::Select" : [ 2, {
            "Fn::Cidr" : [ {
              "Fn::Select" : [ 0, {
                "Fn::GetAtt" : [ "Vpc", "Ipv6CidrBlocks" ]
              } ]
            }, 6, 64 ]
          } ]
        },
        "MapPublicIpOnLaunch" : true,
        "VpcId" : {
          "Ref" : "Vpc"
        }
      },
      "Type" : "AWS::EC2::Subnet"
    },
    "SubnetCRouteTableAssociation" : {
      "Condition" : "3AZs",
      "Properties" : {
        "RouteTableId" : {
          "Ref" : "RouteTable"
        },
        "SubnetId" : {
          "Ref" : "SubnetC"
        }
      },
      "Type" : "AWS::EC2::SubnetRouteTableAssociation"
    },
    "SubnetD" : {
      "Condition" : "4AZs",
      "DependsOn" : "VpcIpv6CidrBlock",
      "Properties" : {
        "AvailabilityZone" : {
          "Fn::Select" : [ 3, {
            "Fn::GetAZs" : ""
          } ]
        },
        "CidrBlock" : {
          "Fn::Select" : [ 3, {
            "Fn::Cidr" : [ {
              "Fn::GetAtt" : [ "Vpc", "CidrBlock" ]
            }, 6, 12 ]
          } ]
        },
        "Ipv6CidrBlock" : {
          "Fn::Select" : [ 3, {
            "Fn::Cidr" : [ {
              "Fn::Select" : [ 0, {
                "Fn::GetAtt" : [ "Vpc", "Ipv6CidrBlocks" ]
              } ]
            }, 6, 64 ]
          } ]
        },
        "MapPublicIpOnLaunch" : true,
        "VpcId" : {
          "Ref" : "Vpc"
        }
      },
      "Type" : "AWS::EC2::Subnet"
    },
    "SubnetDRouteTableAssociation" : {
      "Condition" : "4AZs",
      "Properties" : {
        "RouteTableId" : {
          "Ref" : "RouteTable"
        },
        "SubnetId" : {
          "Ref" : "SubnetD"
        }
      },
      "Type" : "AWS::EC2::SubnetRouteTableAssociation"
    },
    "SubnetE" : {
      "Condition" : "5AZs",
      "DependsOn" : "VpcIpv6CidrBlock",
      "Properties" : {
        "AvailabilityZone" : {
          "Fn::Select" : [ 4, {
            "Fn::GetAZs" : ""
          } ]
        },
        "CidrBlock" : {
          "Fn::Select" : [ 4, {
            "Fn::Cidr" : [ {
              "Fn::GetAtt" : [ "Vpc", "CidrBlock" ]
            }, 6, 12 ]
          } ]
        },
        "Ipv6CidrBlock" : {
          "Fn::Select" : [ 4, {
            "Fn::Cidr" : [ {
              "Fn::Select" : [ 0, {
                "Fn::GetAtt" : [ "Vpc", "Ipv6CidrBlocks" ]
              } ]
            }, 6, 64 ]
          } ]
        },
        "MapPublicIpOnLaunch" : true,
        "VpcId" : {
          "Ref" : "Vpc"
        }
      },
      "Type" : "AWS::EC2::Subnet"
    },
    "SubnetERouteTableAssociation" : {
      "Condition" : "5AZs",
      "Properties" : {
        "RouteTableId" : {
          "Ref" : "RouteTable"
        },
        "SubnetId" : {
          "Ref" : "SubnetE"
        }
      },
      "Type" : "AWS::EC2::SubnetRouteTableAssociation"
    },
    "SubnetF" : {
      "Condition" : "6AZs",
      "DependsOn" : "VpcIpv6CidrBlock",
      "Properties" : {
        "AvailabilityZone" : {
          "Fn::Select" : [ 5, {
            "Fn::GetAZs" : ""
          } ]
        },
        "CidrBlock" : {
          "Fn::Select" : [ 5, {
            "Fn::Cidr" : [ {
              "Fn::GetAtt" : [ "Vpc", "CidrBlock" ]
            }, 6, 12 ]
          } ]
        },
        "Ipv6CidrBlock" : {
          "Fn::Select" : [ 5, {
            "Fn::Cidr" : [ {
              "Fn::Select" : [ 0, {
                "Fn::GetAtt" : [ "Vpc", "Ipv6CidrBlocks" ]
              } ]
            }, 6, 64 ]
          } ]
        },
        "MapPublicIpOnLaunch" : true,
        "VpcId" : {
          "Ref" : "Vpc"
        }
      },
      "Type" : "AWS::EC2::Subnet"
    },
    "SubnetFRouteTableAssociation" : {
      "Condition" : "6AZs",
      "Properties" : {
        "RouteTableId" : {
          "Ref" : "RouteTable"
        },
        "SubnetId" : {
          "Ref" : "SubnetF"
        }
      },
      "Type" : "AWS::EC2::SubnetRouteTableAssociation"
    },
    "Vpc" : {
      "Properties" : {
        "CidrBlock" : "10.0.0.0/16",
        "EnableDnsHostnames" : true,
        "EnableDnsSupport" : true
      },
      "Type" : "AWS::EC2::VPC"
    },
    "VpcIpv6CidrBlock" : {
      "Properties" : {
        "AmazonProvidedIpv6CidrBlock" : true,
        "VpcId" : {
          "Ref" : "Vpc"
        }
      },
      "Type" : "AWS::EC2::VPCCidrBlock"
    }
  }
}